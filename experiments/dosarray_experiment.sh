#/bin/sh -e
# Main support functions for running DoSarray experiments
# Nik Sultana, February 2018, UPenn

if [ -z "${DOSARRAY_SCRIPT_DIR}" ]
then
  echo "Need to configure DoSarray -- set \$DOSARRAY_SCRIPT_DIR" >&2
  exit 1
elif [ ! -e "${DOSARRAY_SCRIPT_DIR}/config/dosarray_config.sh" ]
then
  echo "Need to configure DoSarray -- could not find dosarray_config.sh at \$DOSARRAY_SCRIPT_DIR/config (${DOSARRAY_SCRIPT_DIR}/config)" >&2
  exit 1
fi
source "${DOSARRAY_SCRIPT_DIR}/config/dosarray_config.sh"

# This is used to insert a manifest in the RESULT_DIR, describing the date at
# which the experiment was made, and a full dump of all configuration
# variables.
function dosarray_manifest() {
  DESTINATION_FILE="$1"
  echo "#  Generated by DoSarray v${DOSARRAY_VERSION} on $(date)" > "${DESTINATION_FILE}"

  if [ -z "${DOSARRAY_INCLUDE_MANIFEST}" ]
  then
    echo "Manifest generation is disabled (by default)" >> "${DESTINATION_FILE}"
    echo "To enable set DOSARRAY_INCLUDE_MANIFEST=1. See USAGE.md for more info." >> "${DESTINATION_FILE}"
  else
    echo "#  Variables:" >> "${DESTINATION_FILE}"
    echo "$(set -o posix; set)" >> "${DESTINATION_FILE}"
    echo "#  Functions:" >> "${DESTINATION_FILE}"
    echo "$(declare -f)" >> "${DESTINATION_FILE}"
  fi
}

function dosarray_tmp_file() {
  TAG="${1}"
  TMPFILE=`mktemp -q /tmp/dosarray.${TAG}.XXXXXX`
  if [ $? -ne 0 ]; then
    echo "DoSarray: Could not create temporary file"
    exit 1
  fi
  echo "${TMPFILE}"
}

function dosarray_http_experiment() {
  TARGET=$1
  ATTACK=$2
  EXPERIMENT_SET=$3
  PRE_DESTINATION_DIR=$4
  NUM_RUNS=$5

  source "${DOSARRAY_SCRIPT_DIR}/src/dosarray_http_experiment_options.sh"

  if [ -z "${NUM_RUNS}" ]
  then
    TOTAL_RUNS=1
  else
    TOTAL_RUNS=${NUM_RUNS}
  fi

  # FIXME add script to combine + visualise data from multiple runs
  for RUN in `seq 1 ${TOTAL_RUNS}`
  do
    if [ "${TOTAL_RUNS}" -eq "1" ]
    then
      export DESTINATION_DIR="${PRE_DESTINATION_DIR}/"
    else
      echo "Starting run ${RUN} of ${TOTAL_RUNS}"
      export DESTINATION_DIR="${PRE_DESTINATION_DIR}/${RUN}/"
    fi

    echo "Started HTTP experiment at $(date): ${TARGET}, ${ATTACK}, ${EXPERIMENT_SET}"
    STD_OUT=`dosarray_tmp_file stdout`
    STD_ERR=`dosarray_tmp_file stderr`
    echo "  Writing to ${DESTINATION_DIR}"
    MANIFEST=`dosarray_tmp_file manifest`
    dosarray_manifest ${MANIFEST}

    TITLE="$(target_str ${TARGET}), $(attack_str ${ATTACK}), ${EXPERIMENT_SET}" \
    ${DOSARRAY_SCRIPT_DIR}/src/dosarray_run_http_experiment.sh ${TARGET} ${ATTACK} \
    > ${STD_OUT} \
    2> ${STD_ERR}

    if [ -z "${DOSARRAY_INCLUDE_STDOUTERR}" ]
    then
      echo "DoSarray stdout was collected in: ${STD_OUT}"
      echo "DoSarray stderr was collected in: ${STD_ERR}"

      # FIXME this "Generated by" string is repeated in different places -- turn into a function?
      echo "#  Generated by DoSarray v${DOSARRAY_VERSION} on $(date)" > "${DESTINATION_DIR}/dosarray.stdout"
      echo "stdout collection is disabled (by default)" >> "${DESTINATION_DIR}/dosarray.stdout"
      echo "To enable set DOSARRAY_INCLUDE_STDOUTERR=1. See USAGE.md for more info." >> "${DESTINATION_DIR}/dosarray.stdout"

      echo "#  Generated by DoSarray v${DOSARRAY_VERSION} on $(date)" > "${DESTINATION_DIR}/dosarray.stderr"
      echo "stderr collection is disabled (by default)" >> "${DESTINATION_DIR}/dosarray.stderr"
      echo "To enable set DOSARRAY_INCLUDE_STDOUTERR=1. See USAGE.md for more info." >> "${DESTINATION_DIR}/dosarray.stderr"
    else
      echo "#  Generated by DoSarray v${DOSARRAY_VERSION} on $(date)" > "${DESTINATION_DIR}/dosarray.stdout"
      cat ${STD_OUT} >> ${DESTINATION_DIR}/dosarray.stdout
      echo "#  Generated by DoSarray v${DOSARRAY_VERSION} on $(date)" > "${DESTINATION_DIR}/dosarray.stderr"
      cat ${STD_ERR} >> ${DESTINATION_DIR}/dosarray.stderr

      rm ${STD_OUT}
      rm ${STD_ERR}
    fi

    mv ${MANIFEST} ${DESTINATION_DIR}/dosarray.manifest

    # FIXME here could carry out post-experiment tasks, such as moving different kinds of experiment files into different directories (e.g., one for raw logs, another for processed logs, and another for graphs)
    # FIXME additionally could convert graphs to different formats, as well as resize as needed.

    echo "Finished at $(date)"
  done
}

# Evenly allocate attackers among the virtual nodes on physical hosts.
function dosarray_evenly_distribute_attackers() {
  NO_ATTACKERS=$1
  # One of the physical nodes is reserved for the target, and the rest for measurement/attack.
  SKIP=1
  NONTARGET_PHYS_NODES=$(( ${#DOSARRAY_PHYSICAL_HOSTS_PUB[@]} - ${SKIP} ))
  AVAILABLE_NODES=$(( ${NONTARGET_PHYS_NODES} * ${DOSARRAY_VIRT_INSTANCES} ))

  #echo "NO_ATTACKERS=${NO_ATTACKERS}"
  #echo "NONTARGET_PHYS_NODES=${NONTARGET_PHYS_NODES}"
  #echo "AVAILABLE_NODES=${AVAILABLE_NODES}"

  if [ "${NO_ATTACKERS}" -gt "${AVAILABLE_NODES}" ]
  then
    echo "\$NO_ATTACKERS(${NO_ATTACKERS}) > \$AVAILABLE_NODES(${AVAILABLE_NODES})" >&2
    exit 1
  fi

  FN='export ATTACKERS="is_attacker() { \ngrep -F -q -x \"\$1\" <<EOF\n'
  VIRT=${DOSARRAY_MIN_VIP}
  while [ "${NO_ATTACKERS}" -gt 0 ]
  do
    for PHYS_IDX in `seq ${SKIP} $(( ${#DOSARRAY_VIRT_NET_SUFFIX[@]} - 1 ))`
    do
      if [ "${NO_ATTACKERS}" -gt 0 ]
      then
        FN+="${DOSARRAY_CONTAINER_PREFIX}${DOSARRAY_VIRT_NET_SUFFIX[${PHYS_IDX}]}.${VIRT}\n"
        NO_ATTACKERS=$(( ${NO_ATTACKERS} - 1 ))
      else
        break
      fi
    done

    VIRT=$(( ${VIRT} + 1 ))
  done

  FN+='EOF\n}\n"'
  #echo "FN=${FN}"
  eval "${FN}"
}
